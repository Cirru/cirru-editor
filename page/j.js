// Generated by CoffeeScript 1.3.3
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

$(function() {
  var blank, capet, editable, empty, exist, focus, in_sight, leaf, p, paste, point, root, t, target;
  editable = 'contenteditable';
  capet = "<code id='target' " + editable + "='true'/>";
  blank = ['', '<br>'];
  paste = '';
  p = function() {
    return $('#point');
  };
  t = function() {
    return $('#target');
  };
  empty = function(elem) {
    var _ref;
    return _ref = elem.html(), __indexOf.call(blank, _ref) >= 0;
  };
  root = function(elem) {
    return elem.parent().attr('id') === 'editor';
  };
  exist = function(elem) {
    return elem.length > 0;
  };
  leaf = function(elem) {
    return elem[0].tagName === 'CODE';
  };
  target = function(elem) {
    return elem.attr('id', 'point').attr(editable, 'true');
  };
  point = function(refocus) {
    var old, up;
    if (refocus == null) {
      refocus = true;
    }
    old = p().removeAttr('id').removeAttr(editable);
    if (exist(old)) {
      old[0].onclick = function(e) {
        old.attr('id', 'target').attr(editable, 'true');
        this.onclick = {};
        point(false);
        e.preventDefault();
        return false;
      };
      while (empty(old)) {
        up = old.parent();
        old.remove();
        old = up;
        if (root(old)) {
          if (empty(old)) {
            old.remove();
          }
          break;
        }
      }
    }
    target(t());
    if (refocus) {
      return focus();
    }
  };
  focus = function() {
    var sel;
    sel = window.getSelection();
    sel.collapse(p()[0], 1);
    $('div').addClass('inline');
    $('div:has(div)').removeClass('inline');
    return p().focus();
  };
  $('#editor').append(capet);
  t().attr('id', 'point');
  focus();
  $('#editor').click(function() {
    console.log('called');
    return focus();
  });
  in_sight = true;
  $('#editor').bind('focus', function() {
    return in_sight = true;
  });
  $('#editor').bind('blur', function() {
    return in_sight = false;
  });
  $('#editor').keydown(function(e) {
    var it, next, prev, up, _ref, _ref1, _ref2;
    console.log(e.keyCode);
    if (in_sight) {
      switch (e.keyCode) {
        case 13:
          p().after("<div>" + capet + "</div>");
          break;
        case 9:
          p().after(capet);
          break;
        case 46:
          if (exist(p().prev())) {
            it = p().prev();
            if (leaf(it)) {
              it.attr('id', 'target');
            } else {
              it.append(capet);
            }
          } else if (exist(p().next())) {
            it = p().next();
            if (leaf(it)) {
              it.attr('id', 'target');
            } else {
              it.prepend(capet);
            }
          } else if (!root(p())) {
            p().parent().after(capet).remove();
          } else if (_ref = p().html(), __indexOf.call(blank, _ref) < 0) {
            p().after(capet);
          } else {
            return true;
          }
          p().remove();
          break;
        case 38:
          if (_ref1 = p().html(), __indexOf.call(blank, _ref1) < 0) {
            p().before(capet);
          } else if (exist(p().prev())) {
            prev = p().prev();
            if (leaf(prev)) {
              prev.attr('id', 'target');
            } else {
              prev.append(capet);
            }
          } else if (!root(p())) {
            p().parent().before(capet);
          } else {
            return false;
          }
          break;
        case 40:
          if (_ref2 = p().html(), __indexOf.call(blank, _ref2) < 0) {
            p().after(capet);
          } else if (exist(p().next())) {
            next = p().next();
            if (leaf(next)) {
              next.attr('id', 'target');
            } else {
              next.prepend(capet);
            }
          } else if (!root(p())) {
            p().parent().after(capet);
          } else {
            return false;
          }
          break;
        case 89:
          if (e.ctrlKey && (!(root(p())))) {
            up = p().parent();
            up.after(capet);
            point();
            paste = up[0].outerHTML || '';
            up.remove();
          }
          return true;
        case 85:
          if (e.ctrlKey && paste.length > 0) {
            p().before(paste);
          }
          return true;
        case 33:
          if (!root(p())) {
            p().parent().before(capet);
          } else {
            return true;
          }
          break;
        case 34:
          if (!root(p())) {
            p().parent().after(capet);
          } else {
            return true;
          }
          break;
        default:
          return true;
      }
      point();
    }
    return false;
  });
  return window.parse = function() {
    var map, res;
    map = function(item) {
      var res;
      if (item.tagName === 'DIV') {
        return item.innerText;
      } else if (item.tagName === 'SECTION') {
        console.log(item.children);
        res = $.map(item.children, function(x) {
          return map(x);
        });
        return [res];
      }
    };
    res = $.map($('#editor')[0].children, map);
    return console.log('res:', res);
  };
});
