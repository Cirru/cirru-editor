// Generated by CoffeeScript 1.4.0
var __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(function(require, exports) {
  var copy, input, show;
  show = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, args);
  };
  input = '<input id="input"/>';
  copy = function(json) {
    return JSON.parse(JSON.stringify(json));
  };
  exports.editor = function(id) {
    var add_history, all, alpha, choice, create_block, ctrl_c, ctrl_v, ctrl_x, ctrl_y, ctrl_z, do_render, elem, focused, get_local, history, insert_blank, insert_char, key, list, move_down, move_left, move_right, move_up, render, reset_history, ret, rm_caret, set_local, tool, _ref;
    elem = document.querySelector("#" + id);
    _ref = require('./functions'), insert_char = _ref.insert_char, insert_blank = _ref.insert_blank, move_left = _ref.move_left, move_right = _ref.move_right, move_up = _ref.move_up, move_down = _ref.move_down, create_block = _ref.create_block, ctrl_x = _ref.ctrl_x, ctrl_c = _ref.ctrl_c, ctrl_v = _ref.ctrl_v, ctrl_z = _ref.ctrl_z, ctrl_y = _ref.ctrl_y, add_history = _ref.add_history, reset_history = _ref.reset_history, rm_caret = _ref.rm_caret;
    tool = {
      err: function(info) {
        throw new Error(info);
      }
    };
    ret = {};
    list = [['\t']];
    focused = false;
    history = {
      all: [['\t']],
      now: 0
    };
    set_local = function(str) {
      return localStorage["cirru." + id] = str;
    };
    get_local = function() {
      return localStorage["cirru." + id];
    };
    ret.reset_history = function(list) {
      return history = reset_history(history, list);
    };
    ret.val = function(value) {
      if (value != null) {
        return list = value;
      } else {
        return list;
      }
    };
    ret.value = function() {
      return rm_caret(list);
    };
    render = require('./renderer').render;
    ret.render = do_render = function() {
      render(list, elem);
      return set_local(JSON.stringify({
        value: list
      }));
    };
    elem.onclick = function(e) {
      var fd;
      focused = true;
      fd = 'cirru-focused';
      if (elem.className.indexOf(fd) < 0) {
        elem.className = elem.className + ' ' + fd;
      }
      return e.stopPropagation();
    };
    window.onclick = function() {
      var fd;
      focused = false;
      fd = 'cirru-focused';
      if (elem.className.indexOf(fd) >= 0) {
        return elem.className = elem.className.replace(fd, '').replace(/\s+$/, '');
      }
    };
    alpha = 'qwertyuiopasdfghjklzxcvbnm';
    all = '`1234567890-=~!@#$%^&*()_+ ';
    all += alpha;
    all += alpha.toUpperCase();
    all += '[]\\{}|;:"\',./<>?';
    all = all.split('');
    document.body.onkeypress = function(e) {
      var char;
      if (focused) {
        char = String.fromCharCode(e.keyCode);
        if (__indexOf.call(all, char) >= 0) {
          list = insert_char(list, char);
          history = add_history(copy(history), copy(list));
          return do_render();
        }
      }
    };
    choice = require('./control').choice;
    document.body.onkeydown = function(e) {
      var code;
      if (focused) {
        code = e.keyCode;
        if (choice[code] != null) {
          list = choice[code](list);
          history = add_history(copy(history), copy(list));
          do_render();
          return e.preventDefault();
        }
      }
    };
    key = new Kibo;
    key.down('ctrl p', function() {
      if (focused) {
        document.querySelector('#caret').after(input).remove();
        focused = false;
        document.querySelector('#input').focus().onkeydown = function(e) {
          if (e.keyCode === 13) {
            focused = true;
            list = insert_char(list, document.querySelector('#input').value);
            do_render();
            e.preventDefault();
            return false;
          }
        };
        return false;
      }
    });
    key.down('ctrl x', function() {
      list = ctrl_x(list);
      do_render();
      return false;
    });
    key.down('ctrl c', function() {
      list = ctrl_c(list);
      do_render();
      return false;
    });
    key.down('ctrl v', function() {
      list = ctrl_v(list);
      do_render();
      return false;
    });
    key.down('ctrl z', function() {
      list = ctrl_z(history);
      do_render();
      return false;
    });
    key.down('ctrl y', function() {
      list = ctrl_y(history);
      do_render();
      return false;
    });
    list = get_local() != null ? (JSON.parse(get_local())).value : (set_local(JSON.stringify({
      value: ['\t']
    })), ['\t']);
    ret.render();
    ret.reset_history(list);
    elem.click();
    return ret;
  };
});
